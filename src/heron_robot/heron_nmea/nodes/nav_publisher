#!/usr/bin/env python

import rospy
from tf import TransformListener
from time import sleep

from heron_nmea.nmea_helpers import TxHelper
from geometry_msgs.msg import PoseWithCovarianceStamped, TwistStamped, Vector3Stamped
from enu.srv import ToFix
from math import degrees, floor, fabs, atan2, hypot, pi
from heron_nmea.rpy_helpers import sea_rpy_from_quaternion
from sensor_msgs.msg import Imu, NavSatFix
from std_msgs.msg import Float32


def nmea_deg(decimal_degrees):
  dd = fabs(decimal_degrees)
  return (floor(dd) * 100) + (dd % 1.0 * 60.0)

def nmea_NS(decimal_degrees):
  return 'N' if decimal_degrees > 0 else 'S'

def nmea_EW(decimal_degrees):
  return 'E' if decimal_degrees > 0 else 'W'


class Nav(TxHelper):
  SENTENCE = "NVG"

  def __init__(self):
    rospy.loginfo("Waiting for ENU to_fix service.")
    rospy.wait_for_service('to_fix')
    rospy.loginfo("Service found, setting up NVG publisher.")
    self.to_fix = rospy.ServiceProxy('to_fix', ToFix)
    self.sub_odom = rospy.Subscriber("odom", PoseWithCovarianceStamped, self._cb)
    self.sub_vel = rospy.Subscriber("navsat/vel", TwistStamped, self._vel)
    self.sub_enu_datum = rospy.Subscriber("navsat/enu_datum", NavSatFix, self._enu_datum)
    self.sub_heading = rospy.Subscriber("/imu/raw_compass_heading", Float32, self._heading)
    self.vel = None
    self.enu_datum = None
    self.heading = None

  def _vel(self, msg):
    self.vel = msg

  def _enu_datum(self, msg):
    self.enu_datum = msg

  def _heading(self, msg):
    self.heading = msg

  def _cb(self, msg):
    if not self.enu_datum:
      rospy.logwarn("Can't publish nav without enu datum.")
      return

    fix = self.to_fix(self.enu_datum, msg.pose.pose.position).llh

    if not self.heading:
      heading = 0.0
    else:
      heading = (pi/2.0) - self.heading.data
    roll = 0.0
    pitch = 0.0


    # Override heading with value from GPS, when we have sufficient speed.
    if self.vel and hypot(self.vel.twist.linear.y, self.vel.twist.linear.x) > 0.2:
      heading = (pi/2.0) - atan2(self.vel.twist.linear.y, self.vel.twist.linear.x)

    if heading < 0: 
      heading += 2*pi

    self.tx(self.gps_time(),
        nmea_deg(fix.latitude), nmea_NS(fix.latitude),
        nmea_deg(fix.longitude), nmea_EW(fix.longitude),
        1, # Pos quality. 1 = GPS, for now we don't publish unless there are fixes.
        0, # Altitude from bottom
        0, # Depth from surface
        degrees(heading), # Heading
        degrees(roll), # Roll
        degrees(pitch), # Pitch
        self.gps_time(msg.header.stamp))


class VelRate(TxHelper):
  SENTENCE = "NVR"

  def __init__(self, tf_listener):
    self.sub_imu = rospy.Subscriber("imu/data", Imu, self._cb)
    self.sub_vel = rospy.Subscriber("navsat/vel", TwistStamped, self._vel)
    self.vel = None
    self.tf_listener = tf_listener

  def _vel(self, msg):
    self.vel = msg

  def _cb(self, msg):
    if self.vel:
      base_av = self.tf_listener.transformVector3("/base_link",
              Vector3Stamped(msg.header, msg.angular_velocity))
      self.tx(self.gps_time(),
          self.vel.twist.linear.x,
          self.vel.twist.linear.y,
          0,  # Vertical component of transit velocity
          -degrees(base_av.vector.y),  # Pitch rate
          degrees(base_av.vector.x), # Roll rate
          -degrees(base_av.vector.z)) # Yaw rate



if __name__ == "__main__":
  rospy.init_node('nmea_nav')
  tf_listener = TransformListener()
  tf_listener.waitForTransform("/base_link", "/imu_link", rospy.Time(), rospy.Duration(10.0))
  sleep(1.0)
  Nav()
  VelRate(tf_listener)
  rospy.spin()

