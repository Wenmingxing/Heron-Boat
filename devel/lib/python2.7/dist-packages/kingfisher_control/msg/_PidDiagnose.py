"""autogenerated by genpy from kingfisher_control/PidDiagnose.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class PidDiagnose(genpy.Message):
  _md5sum = "178ff46e4ffd1a4c9cbf9be267502845"
  _type = "kingfisher_control/PidDiagnose"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 P
float32 I
float32 D
float32 PID
float32 Error
float32 Setpoint
float32 Derivative
float32 Integral


"""
  __slots__ = ['P','I','D','PID','Error','Setpoint','Derivative','Integral']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       P,I,D,PID,Error,Setpoint,Derivative,Integral

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PidDiagnose, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.P is None:
        self.P = 0.
      if self.I is None:
        self.I = 0.
      if self.D is None:
        self.D = 0.
      if self.PID is None:
        self.PID = 0.
      if self.Error is None:
        self.Error = 0.
      if self.Setpoint is None:
        self.Setpoint = 0.
      if self.Derivative is None:
        self.Derivative = 0.
      if self.Integral is None:
        self.Integral = 0.
    else:
      self.P = 0.
      self.I = 0.
      self.D = 0.
      self.PID = 0.
      self.Error = 0.
      self.Setpoint = 0.
      self.Derivative = 0.
      self.Integral = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_8f.pack(_x.P, _x.I, _x.D, _x.PID, _x.Error, _x.Setpoint, _x.Derivative, _x.Integral))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 32
      (_x.P, _x.I, _x.D, _x.PID, _x.Error, _x.Setpoint, _x.Derivative, _x.Integral,) = _struct_8f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_8f.pack(_x.P, _x.I, _x.D, _x.PID, _x.Error, _x.Setpoint, _x.Derivative, _x.Integral))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 32
      (_x.P, _x.I, _x.D, _x.PID, _x.Error, _x.Setpoint, _x.Derivative, _x.Integral,) = _struct_8f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_8f = struct.Struct("<8f")
