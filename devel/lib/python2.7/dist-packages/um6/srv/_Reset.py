"""autogenerated by genpy from um6/ResetRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ResetRequest(genpy.Message):
  _md5sum = "88aed859f96ffbc3fdce434a0b135bb3"
  _type = "um6/ResetRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool zero_gyros
bool reset_ekf
bool set_mag_ref
bool set_accel_ref

"""
  __slots__ = ['zero_gyros','reset_ekf','set_mag_ref','set_accel_ref']
  _slot_types = ['bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       zero_gyros,reset_ekf,set_mag_ref,set_accel_ref

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ResetRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.zero_gyros is None:
        self.zero_gyros = False
      if self.reset_ekf is None:
        self.reset_ekf = False
      if self.set_mag_ref is None:
        self.set_mag_ref = False
      if self.set_accel_ref is None:
        self.set_accel_ref = False
    else:
      self.zero_gyros = False
      self.reset_ekf = False
      self.set_mag_ref = False
      self.set_accel_ref = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_4B.pack(_x.zero_gyros, _x.reset_ekf, _x.set_mag_ref, _x.set_accel_ref))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 4
      (_x.zero_gyros, _x.reset_ekf, _x.set_mag_ref, _x.set_accel_ref,) = _struct_4B.unpack(str[start:end])
      self.zero_gyros = bool(self.zero_gyros)
      self.reset_ekf = bool(self.reset_ekf)
      self.set_mag_ref = bool(self.set_mag_ref)
      self.set_accel_ref = bool(self.set_accel_ref)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_4B.pack(_x.zero_gyros, _x.reset_ekf, _x.set_mag_ref, _x.set_accel_ref))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 4
      (_x.zero_gyros, _x.reset_ekf, _x.set_mag_ref, _x.set_accel_ref,) = _struct_4B.unpack(str[start:end])
      self.zero_gyros = bool(self.zero_gyros)
      self.reset_ekf = bool(self.reset_ekf)
      self.set_mag_ref = bool(self.set_mag_ref)
      self.set_accel_ref = bool(self.set_accel_ref)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_4B = struct.Struct("<4B")
"""autogenerated by genpy from um6/ResetResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ResetResponse(genpy.Message):
  _md5sum = "d41d8cd98f00b204e9800998ecf8427e"
  _type = "um6/ResetResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """

"""
  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ResetResponse, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
class Reset(object):
  _type          = 'um6/Reset'
  _md5sum = '88aed859f96ffbc3fdce434a0b135bb3'
  _request_class  = ResetRequest
  _response_class = ResetResponse
