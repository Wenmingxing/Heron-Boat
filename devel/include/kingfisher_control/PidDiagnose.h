/* Software License Agreement (BSD License)
 *
 * Copyright (c) 2011, Willow Garage, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials provided
 *    with the distribution.
 *  * Neither the name of Willow Garage, Inc. nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * Auto-generated by genmsg_cpp from file /home/lukewen/heron_ws/src/kingfisher_control/msg/PidDiagnose.msg
 *
 */


#ifndef KINGFISHER_CONTROL_MESSAGE_PIDDIAGNOSE_H
#define KINGFISHER_CONTROL_MESSAGE_PIDDIAGNOSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kingfisher_control
{
template <class ContainerAllocator>
struct PidDiagnose_
{
  typedef PidDiagnose_<ContainerAllocator> Type;

  PidDiagnose_()
    : P(0.0)
    , I(0.0)
    , D(0.0)
    , PID(0.0)
    , Error(0.0)
    , Setpoint(0.0)
    , Derivative(0.0)
    , Integral(0.0)  {
    }
  PidDiagnose_(const ContainerAllocator& _alloc)
    : P(0.0)
    , I(0.0)
    , D(0.0)
    , PID(0.0)
    , Error(0.0)
    , Setpoint(0.0)
    , Derivative(0.0)
    , Integral(0.0)  {
    }



   typedef float _P_type;
  _P_type P;

   typedef float _I_type;
  _I_type I;

   typedef float _D_type;
  _D_type D;

   typedef float _PID_type;
  _PID_type PID;

   typedef float _Error_type;
  _Error_type Error;

   typedef float _Setpoint_type;
  _Setpoint_type Setpoint;

   typedef float _Derivative_type;
  _Derivative_type Derivative;

   typedef float _Integral_type;
  _Integral_type Integral;




  typedef boost::shared_ptr< ::kingfisher_control::PidDiagnose_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kingfisher_control::PidDiagnose_<ContainerAllocator> const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;

}; // struct PidDiagnose_

typedef ::kingfisher_control::PidDiagnose_<std::allocator<void> > PidDiagnose;

typedef boost::shared_ptr< ::kingfisher_control::PidDiagnose > PidDiagnosePtr;
typedef boost::shared_ptr< ::kingfisher_control::PidDiagnose const> PidDiagnoseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kingfisher_control::PidDiagnose_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kingfisher_control::PidDiagnose_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace kingfisher_control

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/hydro/share/std_msgs/cmake/../msg'], 'kingfisher_control': ['/home/lukewen/heron_ws/src/kingfisher_control/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::kingfisher_control::PidDiagnose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kingfisher_control::PidDiagnose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kingfisher_control::PidDiagnose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kingfisher_control::PidDiagnose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kingfisher_control::PidDiagnose_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kingfisher_control::PidDiagnose_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kingfisher_control::PidDiagnose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "178ff46e4ffd1a4c9cbf9be267502845";
  }

  static const char* value(const ::kingfisher_control::PidDiagnose_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x178ff46e4ffd1a4cULL;
  static const uint64_t static_value2 = 0x9cbf9be267502845ULL;
};

template<class ContainerAllocator>
struct DataType< ::kingfisher_control::PidDiagnose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kingfisher_control/PidDiagnose";
  }

  static const char* value(const ::kingfisher_control::PidDiagnose_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kingfisher_control::PidDiagnose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 P\n\
float32 I\n\
float32 D\n\
float32 PID\n\
float32 Error\n\
float32 Setpoint\n\
float32 Derivative\n\
float32 Integral\n\
\n\
";
  }

  static const char* value(const ::kingfisher_control::PidDiagnose_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kingfisher_control::PidDiagnose_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.P);
      stream.next(m.I);
      stream.next(m.D);
      stream.next(m.PID);
      stream.next(m.Error);
      stream.next(m.Setpoint);
      stream.next(m.Derivative);
      stream.next(m.Integral);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct PidDiagnose_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kingfisher_control::PidDiagnose_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kingfisher_control::PidDiagnose_<ContainerAllocator>& v)
  {
    s << indent << "P: ";
    Printer<float>::stream(s, indent + "  ", v.P);
    s << indent << "I: ";
    Printer<float>::stream(s, indent + "  ", v.I);
    s << indent << "D: ";
    Printer<float>::stream(s, indent + "  ", v.D);
    s << indent << "PID: ";
    Printer<float>::stream(s, indent + "  ", v.PID);
    s << indent << "Error: ";
    Printer<float>::stream(s, indent + "  ", v.Error);
    s << indent << "Setpoint: ";
    Printer<float>::stream(s, indent + "  ", v.Setpoint);
    s << indent << "Derivative: ";
    Printer<float>::stream(s, indent + "  ", v.Derivative);
    s << indent << "Integral: ";
    Printer<float>::stream(s, indent + "  ", v.Integral);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KINGFISHER_CONTROL_MESSAGE_PIDDIAGNOSE_H
